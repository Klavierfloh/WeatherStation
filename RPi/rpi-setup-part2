#  setup ip config
# 1. open config file
sudo nano /etc/network/interfaces
#2. Enter the following:

#Ethernet
auto eth0
allow-hotplug eth0
iface eth0 inet static
address 141.56.111.86
netmask 255.255.255.0
gateway 141.56.111.254
dns-nameservers 141.56.1.1

#3. restart network (!disconnects ssh!)
sudo service networking restart

#--------------------------------------
#1. Install Mosquitto
sudo apt-get install mosquitto -y
sudo apt-get install mosquitto-clients
 
#2. Configure Mosquitto.
#a. Run the following
sudo nano /etc/mosquitto/mosquitto.conf
 
#b. Paste the following: 

# Place your local configuration in /etc/mosquitto/conf.d/
#
# A full description of the configuration file is at
# /usr/share/doc/mosquitto/examples/mosquitto.conf.example
 
pid_file /var/run/mosquitto.pid
 
persistence true
persistence_location /var/lib/mosquitto/
 
log_dest file /var/log/mosquitto/mosquitto.log
 
allow_anonymous false
password_file /etc/mosquitto/pwfile
listener 1883
 


3. Setup Mosquitto credentials
sudo mosquitto_passwd -c /etc/mosquitto/pwfile userlog
 
4.  stopped and start mosquitto
#sudo /etc/init.d/mosquitto restart
sudo systemctl stop mosquitto
sudo systemctl start mosquitto


4. Test the Mosquitto by subscribing to a topic
mosquitto_sub -d -u usr -P 123456 -t dev/test
5. Sending test messages 
mosquitto_pub -d -u user2 -P 123456 -h localhost -t dev/test  -m "hallo Welt"
mosquitto_pub -d -u user2 -P 123456 -h 127.0.0.1 -t desv/test -m 15.3
# send data to parse as JSON by node-red
mosquitto_pub -h 127.0.0.1 -m '{"t": 22.3, "h": 75.2, "p": 1022.3}' -t desv/topBME280 -d -u user2 -P 123456


------------------------------------------------------

Wlanfix

sudo nano /etc/network/interfaces  #alles bis auf die erste unkommentierte Zeile löschen
sudo systemctl enable dhcpcd
sudo systemctl disable networking
sudo reboot

---------------------------------------------------------
# node-red
# create "mqtt-broker"-node
Server: localhost:1883
	Protocol: MQTT v3.1.1
	Security: user2 123456
Topic:+/topBME280
Output: a parsed JSON object

#create change-node to reformate data
Set JSONData Expression:
[
    {
        "timestamp" : payload.c,
        "temperature": payload.t,
        "humidity": payload.h,
        "pressure": payload.p
    }
]
# 3. influx-out-node
Server: v1.8-flux
	URL: http://localhost:8086
	Username: htwadmin
	Password: influxadminpw
Database: sensor
Measurement: BME280_1
---------------------------------------------------------

influx in node-red

cd ~/.node-red/					2019-09-17T21:12:05Z
npm install node-red-contrib-influxdb
node-red-restart
sudo systemctl enable nodered.service
sudo systemctl start nodered.service

----------------------------------------------------------

#influxdb
# fetching the official repository key and adding it to the local keyring:
wget -qO- https://repos.influxdata.com/influxdb.key | sudo apt-key add -Copy
# find out what version you’re running:
lsb_release -a
# add the repository for Raspbian Buster:
echo "deb https://repos.influxdata.com/debian buster stable" | sudo tee /etc/apt/sources.list.d/influxdb.list
# install
sudo apt install influxdb
# Enable InfluxDB at startup:
sudo systemctl unmask influxdb
sudo systemctl enable influxdb
# Start InfluxDB manually this time. In future, it will be started automatically
sudo systemctl start influxdb

# connect
influx
# setup
CREATE USER adminname WITH PASSWORD 'adminpassword' WITH ALL PRIVILEGES
exit
sudo nano /etc/influxdb/influxdb.conf
# check values:
	auth-enabled = true
	pprof-enabled = true
	pprof-auth-enabled = true
	ping-auth-enabled = true
# login to influx and setup database
influx -username htwadmin -password influxadminpw
CREATE DATABASE sensor
	# if needed drop series or measurement
	USE sensor
	SELECT * FROM "temperature"
	DROP SERIES FROM "temperature"
	DROP MEASUREMENT measurement_name
exit
# start web interface
influxd 
#login
influx -username htwadmin -password influxadminpw
use sensor
drop SERIES FROM "bme280_1"


-------------------------
# telegraf for 32bit support of influxdb
wget -q https://repos.influxdata.com/influxdata-archive_compat.key
echo '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c && cat influxdata-archive_compat.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg > /dev/null
echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list
sudo apt-get update && sudo apt-get install telegraf

--------------------------------------------------------
# Grafana
# fetching the public key for the repository and adding it to the local keyring
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add
# add the repository itself
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
# Update the package list (again!) and install the Grafana package:
sudo apt update
sudo apt install grafana
# enable the service so that it will start automatically
sudo systemctl enable grafana-server 
sudo systemctl start grafana-server

# Panel: Table with all data
SELECT "temperature", "humidity", "pressure" FROM "bme280_1" WHERE $timeFilter
--------------------------------------------------------
Einrichtung Proxy

sudo nano environment
paste this:
#export http_proxy="http://www-cache.htw-dresden.de:3128"
#export https_proxy="http://www-cache.htw-dresden.de:3128"
#export no_proxy="localhost,127.0.0.1"

sudo visudo
einfügen: Defaults env_keep+="http_proxy https_proxy no_proxy"


------------------------------------------------------------
clock/NTP:
#NTP is not available by default on Raspberry Pi OS, so install it:
# manual time set
sudo timedatectl set-ntp false
sudo timedatectl set-time '2023-06-02 11:28:00'

#use ntp to set time
sudo nano /etc/systemd/timesyncd.conf

	NPT=ntp.htw-dresden.de
	#FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org
	RootDistanceMaxSec=30
	PollIntervalMinSec=300
	PollIntervalMacSec=2048

sudo timedatectl set-ntp true
sudo systemctl restart systemd-timesyncd.service
sudo timedatectl status
-------------------------------------------------------------
{"c": 20230530 138759665201349001264, "t": 0.000000, "p": 0.000000, "h":  32.983398}
1685445140000
1685444835000
1685703756427000000
1685445239000000000

Quellen:
https://pastebin.com/Etn59ppp
https://fullstackenergy.com/mqtt-into-influx/
https://www.superhouse.tv/41-datalogging-with-mqtt-node-red-influxdb-and-grafana/
https://gbaeke.gitbooks.io/open-source-iot/content/chapter1.html  # installing mosquitto
https://gbaeke.gitbooks.io/open-source-iot/content/writing-an-mqtt-client.html
https://gbaeke.gitbooks.io/open-source-iot/content/from-mqtt-to-influxdb.html
https://stackoverflow.com/questions/75653643/writing-mqtt-data-to-influxdb-via-python-script
https://docs.influxdata.com/resources/videos/using-mqtt-and-influxdb-for-iot/
https://docs.influxdata.com/resources/videos/intro-to-telegraf/
https://awesome.influxdata.com/docs/part-1/setting-up-influxdb/
https://docs.influxdata.com/influxdb/v2.0/install/?t=Raspberry+Pi
https://docs.influxdata.com/telegraf/v1.26/install/
https://www.influxdata.com/blog/writing-data-to-influxdb-with-python/
https://docs.influxdata.com/influxdb/v2.1/query-data/flux/manipulate-timestamps/
https://stevesnoderedguide.com/working-with-time
